
Notes:
ECRR documents:

The examples are in:
 assets/examples/(tools/dataset/org)
Base starter files will be in
* assets/basefiles/(tools...)

The jsonld schemas, and url are javacript code, so that are not in assets, but are in schema/


Controled Vocabualries
https://docs.google.com/spreadsheets/d/1ykxgdeDjBzcTc1y64CuyaS2PhDuUtLuO5AFUehwhxDs/edit#gid=0
submitted forms:
https://docs.google.com/spreadsheets/d/1rCtWCCy51PLlpFkcG9oOVQZnIB75RwMK9nZxbZIYXIU/edit#gid=694164158

Thoughts:
* could have two entry points:
1. a simple mostly single entry form
2. omplete add elements as array form.

Codebase:
https://jsonforms.io/
More specifically: The vuetify components:

https://jsonforms-vuetify-renderers.netlify.app/#/

Errors when Creating forms:
==
Initial data and modified schema need to match, or you may see an error about an object
* Is it an array? Some things are strings, but should be arrays
* just remove it.


Schema changes:
===
Error:
no schema with key or ref
Solution:
Remove the"$schema": "http://json-schema.org/draft-04/schema#"


===
Arrays;
zappping oneOf
"alternateName": {
"title": "alternate name for resource",
"description": "other names, abbreviations, languages, by which the resource might be known.  If names are provided in a non-English language, please suffix a language identifier using the '@' delimiter and an ISO-639-1 two letter language code, e.g. Forme universelle binaire de l'OMM@fr. Separate entries with a pipe ('|') character",
"oneOf": [
{"type": "string"},
{
"type": "array",
"items": {"type": "string"}
}
]
},

becomes:
"alternateName": {
"title": "alternate name for resource",
"description": "other names, abbreviations, languages, by which the resource might be known.  If names are provided in a non-English language, please suffix a language identifier using the '@' delimiter and an ISO-639-1 two letter language code, e.g. Forme universelle binaire de l'OMM@fr. Separate entries with a pipe ('|') character",
"type": "array",
"items": {"type": "string"}

},
====
DEFAULT VALUES
"identifier_type":
    {
      "type": "object",
      "properties": {
        "@type": {"type": "string", "const": "PropertyValue", "default":  "PropertyValue"},
        "value": {"type": "string"},
        "propertyID": {"type": "string",
          "enum": ["DATACITEURL", "PERLURL","DOIURL"],
          "default":"DOIURL"},
        "name": {"type": "string",
          "enum": ["DATACITE", "DOI","OTHER"],
          "default":"DOI"}

      }
    }

You can hide fields using options:details
 {
      "label": "Identifier",
      "type": "Control",
      "scope": "#/properties/@id",
      "options": {
        "showUnfocusedDescription": true,
        "readonly": true,
          "elementLabelProp": "value",
          "detail" : {
                                  "type": "HorizontalLayout",
            "elements": [
              {
                "label": "Indentifier",
                "type": "Control",
                "scope": "#/properties/value"
              },
              {
                "label": "Type",
                "type": "Control",
                "scope": "#/properties/propertyID"
              },
              {
                "label": "PropertyName",
                "type": "Control",
                "scope": "#/properties/name"
              }
             ]
           }

        }

},
====
FEILD NOT RENDERING:

"type":"string" is needed
FAILS
 "@type": {
          "enum": [
            "Person",
            "Organization"
          ],
          "default":"Person"
        },

 WORKS
  "@type": { "type": "string",
           "enum": [
             "Person",
             "Organization"
           ],
           "default":"Person"
         },

FAILS:
 "items": {
        "enum": [
          "CreativeWork",
          "SoftwareApplication",
          "Product"
        ]
      }
WORKS:
 "items": { "type": "string",
        "enum": [
          "CreativeWork",
          "SoftwareApplication",
          "Product"
        ]
      }
JUST EXAMPLES:
"@type": {"type": "string", "const": "PropertyValue",},

==== Properties fill in when a value is added
If on the value is needed, and other fields are constants, then use a details to hide the other field

SCHEMA

   "ecrro:ECRRO_0000600": {
               "type": "object",
               "description": "primary publication-- a text citation to one or more publications about the resource; separated by pipe ('|') characters",
               "properties": {
                 "@type": {"type": "string", "const": "PropertyValue", "default":"PropertyValue"},
                 "propertyID": {"type": "string", "const": "ecrro:ECRRO_0000600", "default": "ecrro:ECRRO_0000600"},
                 "name": {
                   "type": "string",
                   "default": "primary publication"
                 },
                 "value": {"type": "string"}
               }
             },

 BASIC UISCHEMA
    {
                     "type": "Control",
                     "label": "1.1.1.1 Primary Publication",
                     "scope": "#/properties/ecrro:ECRRO_0000600",
                     "options": {
                       "showUnfocusedDescription": true
                     }
                   }
FINAL UISCHEMA:
{
     "type": "ShowGroup",
     "label": "Add Primary Publication",
     "elements": [

       {
         "type": "Control",
         "label": "1.1.1.1 Primary Publication",
         "scope": "#/properties/ecrro:ECRRO_0000600",
         "options": {
           "showUnfocusedDescription": true,

             "detail" : {
                "type": "HorizontalLayout",
               "elements": [
                 {
                   "label": "Value",
                   "type": "Control",
                   "scope": "#/properties/value"
                 },
                ]
                }

         }
       }
     ]
},

This will appear in the JSONLD
"ecrro:ECRRO_0000600":
{
"value":
"ddd",
"@type":
"PropertyValue",
"propertyID":
"ecrro:ECRRO_0000600",
"name":
"primary publication"
}
====
List of "OBJECTS":
use oneOf:

   "license": {
      "title": "legal statement of conditions for use and access",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "oneOf": [
          {
            "title": "License 1",
            "const": {

              "@type": "CreativeWork"
            ,
              "name": "License 1",
              "url":  "use if CreativeWork or URL; if use url, the value is a string"

            }
          },
          {
            "title": "License 2",
            "const": {

              "@type": "CreativeWork",
              "name": "License 2",
              "url": "use if CreativeWork or URL; if use url, the value is a string"
            }
          }
        ]
      }
    },

## FLATTENING #######
We will use code to save an retrieve to 'flatten/unflatten' the additional properties field.
will keep a log in flatten.txt
use this to flatten/unflatten fields


using additionalProperties with an achor reference or a one of reference does not work.

1) additional properties is not rendering defaults.
They clobber each other since they are in a anyOf

notes for:
ecrro:ECRRO_0000600

                  //#/definitions/additionalProperty_type/anyOf/3/type
                  //#/definitions/additionalProperty_type/anyOf/3/properties/propertyID/const
                  //#/definitions/additionalProperty_type/anyOf/5/$anchor
                //  "scope": "#/properties/additionalProperty/items/#ECRRO_0000600",
                //#/properties/additionalProperty/items/$ref
                //  "scope": "#/properties/additionalProperty/items/anyOf/5/", // works
                //  "scope": "https://example.com/schemas/properties/additionalProperty/items/anyOf/#ECRRO0000600", //fails
                    "scope": "#/properties/ecrro:ECRRO_0000600",
